
package ec.edu.monster.convertionclient;
//------------------------------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 9.3.3.2
//
// Created by Quasar Development 
//
// This class has been generated for test purposes only and cannot be used in any commercial project.
// To use it in commercial project, you need to generate this class again with Premium account.
// Check https://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account.
//
// Licence: D66AF282617D7256703FC8C79B671C10E55882BDBDD2F1B85551AFA94EE2CBD134FEC923F8BE0242192286A9E41768C2D17AAA3E8C7DAF3C21EC8B1E9EA5BAFA
//------------------------------------------------------------------------

import java.util.*;


public class GPTBasicHttpBinding_IConversion
{
    private String url = "http://192.168.100.23:50176/ec.edu.monster.controlador/Conversion.svc";
    private HashMap< String,String> httpHeaders = new HashMap< String,String>();
    private boolean enableLogging = false;
    private String userName=null;
    private String password=null;
    private GPTConnectionProvider connectionProvider=new GPTHttpConnectionProvider();

    public GPTBasicHttpBinding_IConversion()
    {
    }

    public GPTBasicHttpBinding_IConversion(String url)
    {
        this.url=url;
    }

    public GPTBasicHttpBinding_IConversion (String url,GPTConnectionProvider connectionProvider) {
        this.url=url;
        this.connectionProvider=connectionProvider;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public HashMap<String, String> getHttpHeaders() {
        return httpHeaders;
    }

    public boolean isLoggingEnabled() {
        return enableLogging;
    }

    public void setLoggingEnabled(boolean enableLogging) {
        this.enableLogging = enableLogging;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
    

    
    protected GPTRequestResultHandler createRequestResultHandler()
    {
        GPTRequestResultHandler handler = new GPTRequestResultHandler(GPTSoapVersion.v1_1);
        return handler;
    }
    
    private org.w3c.dom.Document createLoginRequest(final GPTCredentials credentials,GPTRequestResultHandler __handler) throws Exception
    {
        org.w3c.dom.Document __xml=__handler.createEnvelopeXml();
        org.w3c.dom.Element __mainNode=__handler.writeElement("http://tempuri.org/","Login",__xml);
        __handler.getBody().appendChild(__mainNode);

        org.w3c.dom.Element __credentialsItemElement=__handler.writeElementWithType(credentials,GPTCredentials.class, "credentials", "http://tempuri.org/", __mainNode, true);
        if(__credentialsItemElement != null)
        {
            credentials.serialize(__credentialsItemElement,__handler);
        }
        __handler.finishEnvelopeXml(__xml);
        return __xml;
    }
    
    public Boolean Login(final GPTCredentials credentials) throws Exception
    {
        GPTRequestResultHandler __handler =createRequestResultHandler();
        org.w3c.dom.Document __xml=createLoginRequest(credentials, __handler);
        sendRequest("http://tempuri.org/IConversion/Login",__xml,__handler);
        org.w3c.dom.Node __result=GPTHelper.getResult(__handler.getOutputBody(), "LoginResult",false);
        if(__result!=null)
        {
            return GPTHelper.toBoolFromString(((org.w3c.dom.Element)__result).getTextContent());
        }
        return null;
    }
    private org.w3c.dom.Document createConvertirCelsiusAFahrenheitRequest(final Double celsius,GPTRequestResultHandler __handler) throws Exception
    {
        org.w3c.dom.Document __xml=__handler.createEnvelopeXml();
        org.w3c.dom.Element __mainNode=__handler.writeElement("http://tempuri.org/","ConvertirCelsiusAFahrenheit",__xml);
        __handler.getBody().appendChild(__mainNode);

        org.w3c.dom.Element __celsiusItemElement=__handler.writeElementWithType(celsius,Double.class, "celsius", "http://tempuri.org/", __mainNode, true);
        if(__celsiusItemElement != null)
        {
            __celsiusItemElement.setTextContent(celsius.toString());
        }
        __handler.finishEnvelopeXml(__xml);
        return __xml;
    }
    
    public Double ConvertirCelsiusAFahrenheit(final Double celsius) throws Exception
    {
        GPTRequestResultHandler __handler =createRequestResultHandler();
        org.w3c.dom.Document __xml=createConvertirCelsiusAFahrenheitRequest(celsius, __handler);
        sendRequest("http://tempuri.org/IConversion/ConvertirCelsiusAFahrenheit",__xml,__handler);
        org.w3c.dom.Node __result=GPTHelper.getResult(__handler.getOutputBody(), "ConvertirCelsiusAFahrenheitResult",false);
        if(__result!=null)
        {
            return Double.valueOf(((org.w3c.dom.Element)__result).getTextContent());
        }
        return null;
    }
    private org.w3c.dom.Document createConvertirFahrenheitACelsiusRequest(final String fahrenheit,GPTRequestResultHandler __handler) throws Exception
    {
        org.w3c.dom.Document __xml=__handler.createEnvelopeXml();
        org.w3c.dom.Element __mainNode=__handler.writeElement("http://tempuri.org/","ConvertirFahrenheitACelsius",__xml);
        __handler.getBody().appendChild(__mainNode);

        org.w3c.dom.Element __fahrenheitItemElement=__handler.writeElementWithType(fahrenheit,String.class, "fahrenheit", "http://tempuri.org/", __mainNode, true);
        if(__fahrenheitItemElement != null)
        {
            __fahrenheitItemElement.setTextContent(fahrenheit.toString());
        }
        __handler.finishEnvelopeXml(__xml);
        return __xml;
    }
    
	/**
	* This method is available in Premium account only. To test if generated classes work correctly with your webservice, please use different method. Check https://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account.
	*/
    public String ConvertirFahrenheitACelsius(final String fahrenheit) throws Exception
    {
        
/*This feature is available in Premium account. To test if generated classes work correctly with your webservice, please use different method. Check https://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account.*/
        throw new UnsupportedOperationException("This feature is available in Premium account. To test if generated classes work correctly with your webservice, please use different method. Check https://EasyWsdl.com/Payment/PremiumAccountDetails to see all benefits of Premium account.");
    }
    protected void sendRequest(String soapAction,org.w3c.dom.Document soapBody, GPTRequestResultHandler handler) throws Exception
    {
        HashMap< String,String> __headers = new HashMap<>();
        __headers.putAll(httpHeaders);
        __headers.put("SOAPAction",soapAction);        
        String __contentType="text/xml";
        __headers.put("content-type",__contentType+";charset=UTF-8");
        if (userName != null)
        {
            String authStr = userName+":"+password;
            String data=Base64.getEncoder().encodeToString(authStr.getBytes(java.nio.charset.StandardCharsets.UTF_8));
            String authValue = "Basic "+data;
            __headers.put("authorization",authValue);
        }
        String __requestBody=GPTHelper.getStringFromDocument(soapBody);
        if(enableLogging)
        {
            System.out.println("requestDump: "+__requestBody);
        }
        GPTResponseData response=connectionProvider.sendRequest(url,__requestBody, __headers,handler, __contentType);
        if(enableLogging)
        {
             System.out.println("responseDump: "+response.getBody());
        }
        handler.setResponse(response);
    }
}
